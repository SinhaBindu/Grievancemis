@model Grievancemis.Models.GrivanceModel
@using Grievancemis.Manager
@{
    ViewBag.Title = "GrievanceForm";
}

<style>

    .form-group {
        margin-bottom: 20px;
    }

    .control-label {
        margin-bottom: 10px;
    }

    .form-control {
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .text-danger {
        margin-top: 10px;
    }


    body {
        font-family: Arial, sans-serif;
        font-size: 16px;
    }


    .container {
        background-color: #f9f9f9;
        padding: 20px;
    }

    .hide {
        display: none;
    }
</style>

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                @using (Html.BeginForm("GrievanceForm", "Grievnce", FormMethod.Post, new { @id = "formid", @class = "", role = "form", autocomplete = "off", enctype = "multipart/form-data", noValidate = "novalidate" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="form-group">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <button type="button" id="send-code" class="btn btn-default">Send Code</button>
                                <button type="button" id="verify-code" class="btn btn-default hide">Verify Code</button>
                                <input type="text" id="verification-code" class="form-control hide" placeholder="Enter verification code">
                            </div>
                        </div>

                        <div class="form-group hide">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group hide">
                            @Html.LabelFor(model => model.PhoneNo, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(model => model.PhoneNo, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group hide">
                            @Html.LabelFor(model => model.GrievanceType, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.GrievanceType, CommonModel.GetGrievanceType(), null, new { @class = "form-control", @required = "required" })
                                @Html.ValidationMessageFor(model => model.GrievanceType, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group hide">
                            @Html.LabelFor(model => model.StateId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.StateId, CommonModel.GetState(), null, new { @class = "form-control", @required = "required" })
                                @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group hide">
                            @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(model => model.Location, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group hide">
                            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(model => model.Title, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group hide">
                            @Html.LabelFor(model => model.GrievanceMessage, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model.GrievanceMessage, new { @class = "form-control", rows = 5 })
                                @Html.ValidationMessageFor(model => model.GrievanceMessage, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group hide">
                            @*@Html.LabelFor(model => model.IsConsent, htmlAttributes: new { @class = "control-label col-md-2" })*@
                            <div class="col-md-10">
                                @Html.CheckBoxFor(model => model.IsConsent)
                                @Html.Label("All information given is accurate to the best of my knowledge. I am willing to provide any additonal document, email, messages, chats as support proof/evidence", htmlAttributes: new { @class = "form-check-label" })
                                @Html.ValidationMessageFor(model => model.IsConsent, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group hide">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Save" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div id="grievances-list">
        @{Html.RenderAction("GetGrievances", "Grievnce");}
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/JS/Master.js"></script>

    <script>
        $(document).ready(function () {
            $('#Email').on('blur', function () {
                if ($(this).val() != '') {
                    $('.hide').removeClass('hide');
                }
            });
            $('#send-code').on('click', function () {
                var email = $('#Email').val();
                $.ajax({
                    type: "POST",
                    url: "/Grievnce/SendCode",
                    data: { email: email },
                    success: function (data) {
                        if (data.success) {
                            toastr.success(data.message);
                            $('#send-code').addClass('hide');
                            $('#send-code').attr('disabled', true);
                            $('#verify-code').removeClass('hide');
                            $('#verification-code').removeClass('hide');
                            $('#verify-code').attr('disabled', false);
                            $('#verification-code').attr('disabled', false);
                        }
                        else {
                            toastr.error(data.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Error: " + xhr.status + " - " + error);
                    }
                });
            });

            $('#verify-code').on('click', function () {
                var email = $('#Email').val();
                var code = $('#verification-code').val();
                $.ajax({
                    type: "POST",
                    url: "/Grievnce/VerifyCode",
                    data: { email: email, code: code },
                    success: function (data) {
                        if (data.success) {
                            toastr.success(data.message);
                            $('.hide').removeClass('hide');
                            $('#verify-code').attr('disabled', true);
                            $('#verification-code').attr('disabled', true);
                        }
                        else {
                            toastr.error(data.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Error: " + xhr.status + " - " + error);
                    }
                });
            });

            $('#formid').submit(function (e) {
                e.preventDefault();
                var formData = $(this).serialize();
                $.ajax({
                    type: "POST",
                    url: "/Grievnce/GrievanceForm",
                    data: formData,
                    success: function (data) {
                        if (data.success) {
                            toastr.success(data.message);
                            $('#formid')[0].reset();
                            $.ajax({
                                type: "GET",
                                url: "/Grievnce/GetGrievances",
                                success: function (data) {
                                    $("#grievances-list").html(data);
                                }
                            });
                        }
                        else {
                            toastr.error(data.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        toastr.error("Error: " + xhr.status + " - " + error);
                    }
                });
            });
        });
        $('#search-button').on('click', function () {
            var stateFilter = $('#state-filter').val();
            var typeFilter = $('#type-filter').val();
            $.ajax({
                type: "GET",
                url: "/Grievnce/GetGrievances",
                data: { stateFilter: stateFilter, typeFilter: typeFilter },
                success: function (data) {
                    $("#grievances-list").html(data);
                    $('#Tbl_Grievance').DataTable();
                }
            });
        });


    </script>
   

}
