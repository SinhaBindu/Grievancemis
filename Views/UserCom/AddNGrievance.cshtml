@model Grievancemis.Models.GrivanceModel
@using Grievancemis.Manager
@{
    ViewBag.Title = "Grievance";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="page-header">
    <div class="page-block">
        <div class="page-header-title">
            <h2 class="mb-0">@ViewBag.Title</h2>
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="~/Report/RevertCount">Dashboard</a></li>
                <li class="breadcrumb-item" aria-current="page">@ViewBag.Title</li>
            </ul>
        </div>
    </div>
</div>

<div class="grid grid-cols-12 gap-6">
    <div class="col-span-12">
        <div class="card">
            <div class="card-body">
                @using (Html.BeginForm("AddNGrievance", "UserCom", FormMethod.Post, new { @id = "formid", @class = "", role = "form", autocomplete = "off", enctype = "multipart/form-data", noValidate = "novalidate" }))
                {
                    @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="mb-4">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @required = "required",@readonly= "readonly" })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="mb-4">
                        <h5 class="mt-3"><span style="color:red;">*</span> Gender</h5>
                        @*@Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })*@
                        @*<span style="color:red;">*</span>*@
                    <div class="form-check inline-block mr-2">
                        @*<input class="form-check-input"
                               type="radio" name="flexRadioDefault" id="flexRadioDefault11">*@
                        @Html.RadioButtonFor(model => model.Gender, "Male", new { @class = "form-check-input", id = "GenderMale" })
                        <label class="form-check-label" for="GenderMale">Male</label>
                    </div>
                    <div class="form-check inline-block mr-2">
                        @*<input class="form-check-input"
                               type="radio" name="flexRadioDefault" id="flexRadioDefault12"
                               checked="checked">*@
                        @Html.RadioButtonFor(model => model.Gender, "Female", new { @class = "form-check-input", id = "GenderFemale", @checked = "checked" })
                        <label class="form-check-label" for="GenderFemale">Female</label>
                    </div>
                        @*<div class="col-md-10">
            @Html.RadioButtonFor(model => model.Gender, "Male", new { id = "GenderMale" }) Male
            @Html.RadioButtonFor(model => model.Gender, "Female", new { id = "GenderFemale", @checked = "checked" }) Female
            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
        </div>*@
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2", @required = "required" })
                        <span style="color:red;">*</span>
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.Name, new { @class = "form-control", @required = "required" })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.PhoneNo, htmlAttributes: new { @class = "control-label col-md-2" })
                        <span style="color:red;">*</span>
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.PhoneNo, new { @class = "form-control", @required = "required", @maxlength = "10" })
                            @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="mb-4">
                        @Html.LabelFor(model => model.GrievanceType, htmlAttributes: new { @class = "control-label col-md-2" })
                        <span style="color:red;">*</span>
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.GrievanceType, CommonModel.GetGrievanceType(), null, new { @class = "form-control", @required = "required" })
                            @Html.ValidationMessageFor(model => model.GrievanceType, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="mb-4">
                        @Html.LabelFor(model => model.StateId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <span style="color:red;">*</span>
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.StateId, CommonModel.GetState(), null, new { @class = "form-control", @required = "required" })
                            @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="mb-4">
                        @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
                        <span style="color:red;">*</span>
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.Location, new { @class = "form-control", @required = "required" })
                            @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="mb-4">
                        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                        <span style="color:red;">*</span>
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.Title, new { @class = "form-control", @required = "required" })
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="mb-4">
                        @Html.LabelFor(model => model.GrievanceMessage, htmlAttributes: new { @class = "control-label col-md-2" })
                        <span style="color:red;">*</span>
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.GrievanceMessage, new { @class = "form-control-input", style = "height:100px;", rows = 5 })
                            @Html.ValidationMessageFor(model => model.GrievanceMessage, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="mb-4">
                        @Html.LabelFor(model => model.DocUpload, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.DocUpload, new { @class = "form-control", type = "file", multiple = "multiple" })
                            @Html.ValidationMessageFor(model => model.DocUpload, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="mb-4 form-check">
                        <span style="color:red;">*</span>
                        @Html.CheckBoxFor(model => model.IsConsent, new { @class = "form-check-input", id = "IsConsentCheckbox", @required = "required" })
                        <label for="IsConsentCheckbox">All information given is accurate to the best of my knowledge. I am willing to provide any additional document, email, messages, chats as support proof/evidence</label>
                        @Html.ValidationMessageFor(model => model.IsConsent, "", new { @class = "text-danger" })
                        @*<div class="col-md-10">
            @Html.CheckBoxFor(model => model.IsConsent, new { id = "IsConsentCheckbox" })
            @Html.Label("All information given is accurate to the best of my knowledge. I am willing to provide any additional document, email, messages, chats as support proof/evidence", htmlAttributes: new { @class = "form-check-label" })
            @Html.ValidationMessageFor(model => model.IsConsent, "", new { @class = "text-danger" })
        </div>*@
                    </div>
                    <div class="mb-4">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Submit" class="btn btn-primary" />
                        </div>
                    </div>
                </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $(".menu-btn").click(function () {
                $(".menu-btn").toggleClass("open");
                $(".nav").toggleClass("show");
            });

            $('#formid').submit(function (e) {


                if ($('#Email').val() == '') {
                    toastr.error('Enter the EmailID.');
                    return false;
                }
                if ($('#Name').val() == '') {
                    toastr.error('Enter the Name.');
                    return false;
                }
                if ($('#PhoneNo').val() == '') {
                    toastr.error('Enter the PhoneNo.');
                    return false;
                }
                if ($('#GrievanceType').val() == '' || $('#GrievanceType').val() == '0') {
                    toastr.error('Enter the Grievance Type.');
                    return false;
                }
                if ($('#State').val() == '' || $('#State').val() == '0') {
                    toastr.error('Enter the State.');
                    return false;
                }
                if ($('#Location').val() == '') {
                    toastr.error('Enter the Location.');
                    return false;
                }
                if ($('#Title').val() == '') {
                    toastr.error('Enter the Title.');
                    return false;
                }
                if ($('#GrievanceMessage').val() == '') {
                    toastr.error('Enter the Message.');
                    return false;
                }
                if ($('input[name="Gender"]:checked').length == 0) {
                    toastr.error('Select your Gender.');
                    return false;
                }
                if ($("#IsConsentCheckbox").is(':checked')) {
                    // Code in the case checkbox is checked.
                } else {
                    // Code in the case checkbox is NOT checked.
                    toastr.error('Check the All information given is accurate to the best of my knowledge.');
                    return false;
                }

                if (confirm("Are you sure you want to Complain Register this?")) {
                    e.preventDefault();
                    var formData = new FormData(this);
                    $.ajax({
                        type: "POST",
                        url: "/UserCom/AddNGrievance",
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function (data) {
                            if (data.success) {
                                toastr.success(data.message);
                                $('#formid')[0].reset();
                            }
                            else {
                                toastr.error(data.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            toastr.error("Error: " + xhr.status + " - " + error);
                        }
                    });
                }
                else {
                    return false;
                }
            });

        });
    </script>
  }